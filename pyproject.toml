[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "qred-mcp-proxy"
version = "0.1.0"
requires-python = ">=3.13"
description = "QRED MCP Proxy - Oauth enabled proxy service for serving aggregated mcp backends"
authors = [
    {name = "Qred", email = "team-eed-platform@qred.com"}
]
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
  "uv==0.8.19",
  "pre-commit==4.3.0",  # Git hook management for automatic code quality checks
  "mcp-proxy",
  "mcp-oauth"
]

[tool.hatch.build.targets.wheel]
packages = [
  "docker/*"
]

[dependency-groups]
dev = [
    "ruff==0.13.1",
    "mypy==1.17.1",  # Type checker
    "pytest==8.4.1",
    "pytest-asyncio==1.2.0",
    "pytest-json-ctrf==0.3.5",
    "httpx==0.28.1",
]
test = [
    "pytest==8.4.1",
    "pytest-asyncio==1.2.0",
    "pytest-mock==3.15.1",
    "pytest-cov==7.0.0",
    "pytest-json-ctrf==0.3.5",
    "httpx==0.28.1",
]

[tool.uv.sources]
mcp-proxy = { path = "docker/mcp_proxy" }
mcp-oauth = { path = "docker/mcp_oauth" }

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".eggs",
    "*.egg",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable comprehensive rule sets for code quality
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort (import sorting)
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade (modernize Python code)
    "SIM",   # flake8-simplify
    "S",     # bandit (security)
    "N",     # pep8-naming
    "PTH",   # flake8-use-pathlib
    "RUF",   # ruff-specific rules
]
ignore = [
    "E501",  # line too long (handled by ruff formatter)
    "E203",  # whitespace before ':' (conflicts with formatter)
    "S101",  # assert used (acceptable in tests)
    "S603",  # subprocess call (acceptable for build tools)
    "S607",  # start process with partial executable path
    "RUF001", # ambiguous unicode characters (false positives with emojis)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py files
"tests/**" = ["S101"]  # Allow assert statements in tests
"**/server.py" = ["S104"]  # Allow binding to all interfaces in server files (containers)
"**/__main__.py" = ["S104"]  # Allow binding to all interfaces in main files (containers)

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
